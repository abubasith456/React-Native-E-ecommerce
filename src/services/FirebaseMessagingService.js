import React, { useEffect } from 'react'
import messaging from '@react-native-firebase/messaging';
import { Alert, Platform } from 'react-native';
import { PermissionsAndroid } from 'react-native';
import PushNotification, { Importance } from 'react-native-push-notification';
import { myFcmToken } from '../constant/AppConstant';

export default function NotificationController() {
    async function requestUserPermission() {
        if (Platform.OS == 'ios') {
            const authStatus = await messaging().requestPermission();
            const enabled =
                authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
                authStatus === messaging.AuthorizationStatus.PROVISIONAL;

            if (enabled) {
                console.log('Authorization status:', authStatus);
            }
        } else {
            PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS)
        }

        const fcmToken = await messaging().getToken();
        if (fcmToken) {
            console.log(fcmToken);
            myFcmToken.myValue = fcmToken
        }

    }

    useEffect(() => {

        requestUserPermission();
        const unsubscribe = messaging().onMessage(async remoteMessage => {
            PushNotification.createChannel({
                channelId: "0", // (required)
                channelName: "Huamn rechable", // (required)
                playSound: true, // (optional) default: true
                soundName: "default", // (optional) See `soundName` parameter of `localNotification` function
                importance: Importance.HIGH, // (optional) default: Importance.HIGH. Int value of the Android notification importance
                vibrate: true, // (optional) default: true. Creates the default vibration pattern if true.
            },
                (created) => console.log(`createChannel returned '${created}'`) // (optional) callback returns whether the channel was created, false means it already existed.
            );
            PushNotification.localNotification({
                channelId: "0",
                id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                title: remoteMessage.notification?.title, // (optional)
                message: remoteMessage.notification?.body, // (required)
                soundName: "default",
                priority: "high",
                vibrate: true,
            });
        });

        return unsubscribe;
    }, [])

    return null;

}